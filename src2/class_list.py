# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'class_list.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

STUDENT_DB = "student.db"
MODE = ''
conn = sqlite3.connect("student.db")
c = conn.cursor()

class Ui_class_form(object):
    def setupUi(self, class_form):
        class_form.setObjectName("class_form")
        class_form.resize(1001, 488)
        class_form.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.groupBox = QtWidgets.QGroupBox(class_form)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 251, 121))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.groupBox.setObjectName("groupBox")
        self.formLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.formLayoutWidget.setGeometry(QtCore.QRect(10, 30, 231, 78))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.find_by = QtWidgets.QPushButton(self.formLayoutWidget, clicked=lambda: self.find_by_item())
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.find_by.setFont(font)
        self.find_by.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.find_by.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.find_by)
        self.find_combo_box = QtWidgets.QComboBox(self.formLayoutWidget)
        self.find_combo_box.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.find_combo_box.setObjectName("find_combo_box")
        self.find_combo_box.addItem("", "Grade")
        self.find_combo_box.addItem("", "Teacher")
        self.find_combo_box.addItem("", "ID")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.find_combo_box)
        self.search_label = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("MS Serif")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.search_label.setFont(font)
        self.search_label.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.search_label.setObjectName("search_label")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.search_label)
        self.search_combo = QtWidgets.QComboBox(self.formLayoutWidget)
        self.search_combo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.search_combo.setObjectName("search_combo")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.search_combo)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.formLayout.setItem(2, QtWidgets.QFormLayout.FieldRole, spacerItem)
        self.groupBox_2 = QtWidgets.QGroupBox(class_form)
        self.groupBox_2.setGeometry(QtCore.QRect(0, 160, 251, 241))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.groupBox_2)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 30, 201, 191))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.add_std_button = QtWidgets.QPushButton(self.verticalLayoutWidget, clicked=lambda: self.change_window(1))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.add_std_button.setFont(font)
        self.add_std_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.add_std_button.setObjectName("add_std_button")
        self.verticalLayout.addWidget(self.add_std_button)
        self.change_tr_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.change_tr_button.setFont(font)
        self.change_tr_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.change_tr_button.setObjectName("change_tr_button")
        self.verticalLayout.addWidget(self.change_tr_button)
        self.remove_std_button = QtWidgets.QPushButton(self.verticalLayoutWidget, clicked=lambda: self.delete_student())
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.remove_std_button.setFont(font)
        self.remove_std_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.remove_std_button.setObjectName("remove_std_button")
        self.verticalLayout.addWidget(self.remove_std_button)
        self.update_class_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.update_class_button.setFont(font)
        self.update_class_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.update_class_button.setObjectName("update_class_button")
        self.verticalLayout.addWidget(self.update_class_button)
        self.update_selected_button = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.update_selected_button.setFont(font)
        self.update_selected_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.update_selected_button.setObjectName("update_selected_button")
        self.verticalLayout.addWidget(self.update_selected_button)
        self.generate_list_button = QtWidgets.QPushButton(self.verticalLayoutWidget, clicked=lambda:self.create_class_list())
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.generate_list_button.setFont(font)
        self.generate_list_button.setStyleSheet("background-color: rgb(125, 205, 127);")
        self.generate_list_button.setObjectName("generate_list_button")
        self.verticalLayout.addWidget(self.generate_list_button)
        self.groupBox_3 = QtWidgets.QGroupBox(class_form)
        self.groupBox_3.setGeometry(QtCore.QRect(270, 160, 721, 321))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_3)
        self.tableWidget.setGeometry(QtCore.QRect(20, 10, 1200, 400))
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.frame = QtWidgets.QFrame(class_form)
        self.frame.setGeometry(QtCore.QRect(280, 90, 721, 61))
        self.frame.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame.setLineWidth(3)
        self.frame.setObjectName("frame")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.frame)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 701, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.grade_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.grade_label.setFont(font)
        self.grade_label.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.grade_label.setObjectName("grade_label")
        self.horizontalLayout.addWidget(self.grade_label)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem1)
        self.teacher_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.teacher_label.setFont(font)
        self.teacher_label.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.teacher_label.setObjectName("teacher_label")
        self.horizontalLayout.addWidget(self.teacher_label)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem2)
        self.student_no_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.student_no_label.setFont(font)
        self.student_no_label.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.student_no_label.setObjectName("student_no_label")
        self.horizontalLayout.addWidget(self.student_no_label)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem3)
        self.room_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.room_label.setFont(font)
        self.room_label.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.room_label.setObjectName("room_label")
        self.horizontalLayout.addWidget(self.room_label)
        self.label_Term = QtWidgets.QLabel(class_form)
        self.label_Term.setGeometry(QtCore.QRect(290, 10, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_Term.setFont(font)
        self.label_Term.setStyleSheet("background-color: rgb(119, 171, 255);")
        self.label_Term.setObjectName("label_Term")
        self.search_button = QtWidgets.QPushButton(class_form, clicked=lambda: self.load_data())
        self.search_button.setGeometry(QtCore.QRect(90, 120, 75, 23))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.search_button.setFont(font)
        self.search_button.setObjectName("search_button")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(class_form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(610, 0, 381, 51))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.term_button = QtWidgets.QPushButton(self.horizontalLayoutWidget_2, clicked=lambda: self.set_term())
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.term_button.setFont(font)
        self.term_button.setObjectName("term_button")
        self.horizontalLayout_2.addWidget(self.term_button)
        self.term_combo = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        self.term_combo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.term_combo.setObjectName("term_combo")
        self.term_combo.addItem("", 1)
        self.term_combo.addItem("", 2)
        self.term_combo.addItem("", 3)
        self.horizontalLayout_2.addWidget(self.term_combo)
        self.year_combo = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        self.year_combo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.year_combo.setObjectName("year_combo")
        self.year_combo.addItem("")
        self.year_combo.addItem("")
        self.year_combo.addItem("")
        self.horizontalLayout_2.addWidget(self.year_combo)

        self.retranslateUi(class_form)
        QtCore.QMetaObject.connectSlotsByName(class_form)

    def retranslateUi(self, class_form):
        _translate = QtCore.QCoreApplication.translate
        class_form.setWindowTitle(_translate("class_form", "class list"))
        self.groupBox.setTitle(_translate("class_form", "Find class"))
        self.find_by.setText(_translate("class_form", "Find class by:"))
        self.find_combo_box.setItemText(0, _translate("class_form", "Grade"))
        self.find_combo_box.setItemText(1, _translate("class_form", "Teacher"))
        self.find_combo_box.setItemText(2, _translate("class_form", "ID"))
        self.search_label.setText(_translate("class_form", "Search:"))
        self.groupBox_2.setTitle(_translate("class_form", "Manage Classroom"))
        self.add_std_button.setText(_translate("class_form", "Add New Student"))
        self.change_tr_button.setText(_translate("class_form", "Change Teacher"))
        self.remove_std_button.setText(_translate("class_form", "Remove Selected"))
        self.update_class_button.setText(_translate("class_form", "Update Class"))
        self.update_selected_button.setText(_translate("class_form", "Update Student"))
        self.generate_list_button.setText(_translate("class_form", "Generate Class list"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("class_form", "Std ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("class_form", "Firstname"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("class_form", "Surname"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("class_form", "Gender"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("class_form", "Address"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("class_form", "Tuition"))
        self.grade_label.setText(_translate("class_form", "Grade:"))
        self.teacher_label.setText(_translate("class_form", "Class Teacher: "))
        self.student_no_label.setText(_translate("class_form", "No. Students:"))
        self.room_label.setText(_translate("class_form", "Room No."))
        self.label_Term.setText(_translate("class_form", "Term: "))
        self.search_button.setText(_translate("class_form", "Search"))
        self.term_button.setText(_translate("class_form", "Select Term/Year"))
        self.term_combo.setItemText(0, _translate("class_form", "Term 1"))
        self.term_combo.setItemText(1, _translate("class_form", "Term 2"))
        self.term_combo.setItemText(2, _translate("class_form", "Term 3"))
        self.year_combo.setItemText(0, _translate("class_form", "2021"))
        self.year_combo.setItemText(1, _translate("class_form", "2022"))
        self.year_combo.setItemText(2, _translate("class_form", "2023"))

    def set_term(self):
        self.label_Term.setText(f'Term: {self.term_combo.currentData()} {self.year_combo.currentText()}')

    def delete_student(self):
        try:
            if self.tableWidget.item(0, 0) is not None:
                row = self.tableWidget.currentRow()
                st_id = self.tableWidget.item(row, 0).text()
                std_id = int(st_id)

                f_name = self.tableWidget.item(row, 1).text()
                s_name = self.tableWidget.item(row, 2).text()
                std_names = f_name + " " + s_name
                # warning message
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Student Management System")
                msg.setText("This action will completely delete " + std_names + " from database!")
                msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                res = msg.exec_()

                if res == QMessageBox.Ok:
                    c.execute("DELETE FROM students WHERE id = ?", (std_id,))
                    conn.commit()
                    # deletion success message
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowTitle("Student Management System")
                    msg.setText("Student deleted Successfully")
                    msg.setStandardButtons(QMessageBox.Ok)
                    msg.exec_()
            else:
                print("Table is empty")

        except Exception as e:
            print(e)
            print("failed to delete record")

    def change_window(self, mode):
        try:
            # import classes
            from new_student import Ui_AddStudentForm as add  # 1
            from new_teacher import Ui_new_teacher as teach  # 2
            from new_class import Ui_add_class as a_class  # 4
            from acct_form import Ui_AddStudentForm as acct  # 5
            from add_user import Ui_Login_form as login  # 6

            # set the window for new window
            self.window = QtWidgets.QMainWindow()
            if mode == 1:
                self.ui = add()
            elif mode == 2:
                self.ui = teach()
            elif mode == 3:
                self.ui = c_form()
            elif mode == 4:
                self.ui = a_class()
            elif mode == 5:
                self.ui = acct()

            # finally open the new window
            self.ui.setupUi(self.window)
            self.window.show()

        except Exception as e:
            print(e)
            print("failed to open new window")

    def find_by_item(self):
        global MODE
        try:
            _translate = QtCore.QCoreApplication.translate
            search = []
            mode = f"{self.find_combo_box.currentData()}"
            if mode == "Grade":
                MODE = "Grade"
                c.execute("SELECT grade FROM classes")
                data = c.fetchall()
                for i in data:
                    search.append(i[0])

                item_1 = search[0]
                item_2 = search[1]
                item_3 = search[2]
                self.search_combo.addItem('', item_1)
                self.search_combo.addItem('', item_2)
                self.search_combo.addItem('', item_3)

                self.search_combo.setItemText(0, _translate("class_form", item_1))
                self.search_combo.setItemText(1, _translate("class_form", item_2))
                self.search_combo.setItemText(2, _translate("class_form", item_3))

            elif mode == "Teacher":
                MODE = "Teacher"
                c.execute("SELECT teacher FROM classes")
                data = c.fetchall()
                for i in data:
                    search.append(i[0])
                item_1 = search[0]
                item_2 = search[1]
                item_3 = search[2]
                self.search_combo.addItem('', item_1)
                self.search_combo.addItem('', item_2)
                self.search_combo.addItem('', item_3)

                self.search_combo.setItemText(0, _translate("class_form", item_1))
                self.search_combo.setItemText(1, _translate("class_form", item_2))
                self.search_combo.setItemText(2, _translate("class_form", item_3))
        except Exception as x:
            print(x)
            print("failed to set search mode")

    def load_data(self):
        try:
            print("mode:", MODE)
            self.tableWidget.clearContents()
            row = 0
            if MODE == "Grade":
                ident = []
                print(ident)
                select_class = self.search_combo.currentData()

            elif MODE == "Teacher":
                ident = []
                print(ident)
                select_data = self.search_combo.currentData()
                c.execute("SELECT grade FROM classes WHERE teacher = ?", (select_data,))
                select_cl = c.fetchall()
                select_class = select_cl[0][0]

            # select data from tables
            print("getting ids")
            ids = c.execute("SELECT id FROM students WHERE class =?", (select_class,))
            student_id = ids.fetchall()
            print("list: ", student_id)
            print("fetched std ids")
            if student_id is not None:
                print("len of list:", len(student_id))
                # set variables
                teach = c.execute("SELECT teacher from classes WHERE grade =?", (select_class,))
                teacher = teach.fetchall()
                rooms = c.execute("SELECT room from classes WHERE grade =?", (select_class,))
                room = rooms.fetchall()
                num_std = len(student_id)

                print("setting headers")
                # change label text
                self.grade_label.setText("Grade:" + select_class)
                print("grade set")
                self.teacher_label.setText("Teacher: " + str(teacher[0][0]).upper())
                self.room_label.setText("Room: " + room[0][0])
                self.student_no_label.setText("No. of students: " + str(num_std))
                print("about to start loop")
                for i in student_id:
                    print("entering loop")
                    if student_id is not None:
                        ident.append(i)
                        print("current list: ", ident)
                        print()
                        std_id = str(student_id[row][0])
                        first = c.execute("SELECT firstname FROM students WHERE id =?", (student_id[row][0],))
                        firstname = first.fetchall()
                        sur = c.execute("SELECT surname FROM students WHERE id =?", (student_id[row][0],))
                        surname = sur.fetchall()
                        gend = c.execute("SELECT gender FROM students WHERE id =?", (student_id[row][0],))
                        gender = gend.fetchall()
                        addr = c.execute("SELECT address FROM students WHERE id =?", (student_id[row][0],))
                        address = addr.fetchall()
                        tuition = "paid"

                        self.tableWidget.setRowCount(len(ident))

                        self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem(std_id))
                        self.tableWidget.setItem(row, 1, QtWidgets.QTableWidgetItem(firstname[0][0]))
                        self.tableWidget.setItem(row, 2, QtWidgets.QTableWidgetItem(surname[0][0]))
                        self.tableWidget.setItem(row, 3, QtWidgets.QTableWidgetItem(gender[0][0]))
                        self.tableWidget.setItem(row, 4, QtWidgets.QTableWidgetItem(address[0][0]))
                        self.tableWidget.setItem(row, 5, QtWidgets.QTableWidgetItem(tuition))
                        row += 1

        except Exception as e:
            print("Something went wrong in loading data")
            print(e)

    def create_class_list(self):  # generate class list function in progress
        try:
            curr_class = f"{self.search_combo.currentData()}"
            c.execute("SELECT firstname, surname, gender, address FROM students WHERE class = ?", (curr_class,))
            class_list = c.fetchall()

            if class_list is not None:
                print(class_list)
            else:
                print('class has no students')

        except Exception as z:
            print(z)
            print("failed to create list")


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    class_form = QtWidgets.QWidget()
    ui = Ui_class_form()
    ui.setupUi(class_form)
    class_form.show()
    sys.exit(app.exec_())
